syntax = "proto3";
package TikTok;

/**

-=-=-=-=-=-=-=-=-=-=-=-
   EVENTS START HERE
-=-=-=-=-=-=-=-=-=-=-=-

*/

// Websocket incoming message structure
message WebcastWebsocketMessage {
  uint64 id = 2;
  string type = 7;
  bytes binary = 8;
}

// Websocket acknowledgment message
message WebcastWebsocketAck {
  uint64 id = 2;
  string type = 7;
}

// Container for ALL webcast messages
message WebcastResponse {

  repeated Message messages = 1;
  string cursor = 2;
  int32 fetchInterval = 3;
  int64 serverTimestamp = 4;
  string internalExt = 5;
  int32 fetchType = 6;  // 1=websocket, 2=long-polling
  WebsocketParam wsParam = 7;
  int32 heartbeatDuration = 8;
  bool needAck = 9;
  string wsUrl = 10;

  // Deserializing binary gets us all other messages
  message Message {
    string type = 1;
    bytes binary = 2;
  }

  message WebsocketParam {
    string name = 1;
    string value = 2;
  }

}

// "Welcome to TikTok LIVE!..."
message RoomMessage {
  string description = 2;
}

// Stream End
message WebcastControlMessage {
  int32 action = 2;
}

// Viewer count update & top viewer list
message WebcastRoomUserSeqMessage {

  repeated TopViewer top_viewers = 2;
  int32 viewer_count = 3;

  message TopViewer {
    uint32 coins_given = 1;
    User user = 2;
    uint32 rank = 3;
  }

}

// Comment Sent
message WebcastChatMessage {

  User user = 2;
  string comment = 3;
  repeated User mentions = 12;
  repeated ChatImage images = 13;
  string language = 14;

  message ChatImage {
    int32 position = 1; // If first, field is null. Otherwise, 1, 2, etc.
    ChatImageImage image = 2;

    message ChatImageImage {
      TikTokImage image = 2;
    }
  }

}

// Member Join
message WebcastMemberMessage {

  WebcastMessageEvent event = 1;
  User user = 2;
  int32 viewers = 3;
  int32 action_id = 10;  // Also provides sub notif -> 1 = join, 7 = subscribe

}

// Gift Sent
message WebcastGiftMessage {

  int32 id = 2;
  int32 repeatCount = 5;
  User user = 7;
  int32 repeatEnd = 9;
  WebcastGiftMessageGiftDetail info = 15;
  WebcastGiftMessageRecipient recipient = 23;

  message WebcastGiftMessageRecipient {
    uint64 timestamp = 6;
    uint64 user_id = 8;
  }

  message WebcastGiftMessageGiftDetail {
    TikTokImage image = 1;
    string name = 16;
    string description = 2;
    int32 id = 5;
    int32 type = 11;
    int32 diamond_count = 12;
  }

}

// Battle Start
message WebcastLinkMicBattle {
  repeated WebcastLinkMicBattleItems battleUsers = 10;

  message WebcastLinkMicBattleItems {
    WebcastLinkMicBattleGroup battleGroup = 2;

    message WebcastLinkMicBattleGroup {
      LinkUser user = 1;

      message LinkUser {
        uint64 user_id = 1;
        string nickname = 2;
        TikTokImage avatar = 3;
        string unique_id = 4;
      }

    }

  }

}

// Battle Status Update
message WebcastLinkMicArmies {
  repeated WebcastLinkMicArmiesItems battleItems = 3;
  int32 battleStatus = 7;

  message WebcastLinkMicArmiesItems {
    uint64 hostUserId = 1;
    repeated WebcastLinkMicArmiesGroup battleGroups = 2;

    message WebcastLinkMicArmiesGroup {
      repeated User users = 1;
      int32 points = 2;
    }

  }

}

// Follow & Share
message WebcastSocialMessage {
  User user = 2;
  uint32 total_followers = 6;
  WebcastMessageEvent event = 1;
}

// Like Event (In batches of 1 <= x <= 15)
message WebcastLikeMessage {
  User user = 5;
  WebcastMessageEvent event = 1;
  int32 likes = 2;
  int32 total_likes = 3;
}

// New Question
message WebcastQuestionNewMessage {
  QuestionDetails questionDetails = 2;

  message QuestionDetails {
    string question = 2;
    User user = 5;
  }

}

// Pinned Start Message
message WebcastLiveIntroMessage {

  uint64 room_id = 2;
  string message = 4;
  User streamer = 5;
  string language = 8;
  IntroData extra_info = 7;

  message IntroData {
    ValueLabel details = 21;
  }

}

// System Message
message SystemMessage {
  string description = 2;
}

// Banner
message WebcastInRoomBannerMessage {
  string data = 2;
}

// Top Viewer
message WebcastRankTextMessage {
  RankTextMessageSummary detailsSmall = 5;
  RankTextMessage details = 6;
  uint64 id1 = 7;

  message RankTextMessageSummary {
    string type = 1;
    string label = 2;
    ValueLabel details = 4;
  }

  message RankTextMessage {
    string type = 1;
    string label = 2;
    repeated MessageDetails details = 4;


    message MessageDetails {
      uint32 data1 = 1;
      string category = 11;
      UserContainer user = 21;

      message UserContainer {
        User user = 1;
        uint32 data1 = 2;
      }

    }

  }
}

// Weekly Ranking
message WebcastRankUpdateMessage {
  RankUpdateData data = 2;

  message RankUpdateData {
    Ranking data = 3;
  }
}

message WebcastHourlyRankMessage {
  RankContainer data = 2;

  message RankContainer {
    Ranking data = 4;
  }
}


message WebcastEmoteChatMessage {
  User user = 2;
  EmoteDetails emote = 3;

  message EmoteDetails {
    string emote_id = 1;
    EmoteImage image = 2;

    message EmoteImage {
      string url = 1;
    }

  }
}


message WebcastEnvelopeMessage {
  TreasureBoxData treasureBoxData = 2;
  TreasureBoxUser treasureBoxUser = 1;

  message TreasureBoxUser {
    TreasureBoxUser2 user2 = 8;

    message TreasureBoxUser2 {
      repeated TreasureBoxUser3 user3 = 4;

      message TreasureBoxUser3 {
        TreasureBoxUser4 user4 = 21;

        message TreasureBoxUser4 {
          User user = 1;
        }

      }

    }

  }

  message TreasureBoxData {
    uint32 coins = 5;
    uint32 openable = 6;
    uint64 timestamp = 7;
  }

}


/**

-=-=-=-=-=-=-=-=-=-=-=-
   DATA STARTS HERE
-=-=-=-=-=-=-=-=-=-=-=-

 */

// TikTok resource image (Icon, Avatar, Badge, etc..)
message TikTokImage {
  repeated string urls = 1;
  string uri = 2;
}

// Message Header
message WebcastMessageEvent {
  WebcastMessageEventDetails details = 8;

  // Contains UI information
  message WebcastMessageEventDetails {
    string display_type = 1;
    string label = 2;
  }

}

// User Structure
message User {

  uint64 user_id = 1;
  string nickname = 3;
  TikTokImage avatar = 9;
  UserInfo info = 22;
  string unique_id = 38;
  string sec_uid = 46;
  repeated UserBadge badges = 64;

  message UserInfo {
    int32 following = 1;
    int32 followers = 2;
    int32 follow_role = 3;
  }

  message UserBadge {

    int32 badge_scene_type = 3;

    /*
    Typically either 21, 20, or 23 are populated.
    More than one is not populated at once.
     */
    BadgeText text = 21; // Holds badge info (moderator)
    BadgeImage image = 20; // Seems to hold images (top gifter, sub) with no extra data
    BadgeComplex complex = 23; // Seems to hold image badges but with data (Level badge, sub level w/ name,)

    message BadgeText {
      string label = 2;
      string name = 3;
    }

    message BadgeImage {
      TikTokImage image = 2;
    }

    message BadgeComplex {

      TikTokImage image = 2; // Contains sub level badge
      BadgeLabel label = 3; // Top gifter status, moderator badge
      string data = 4; // Found to contain: Gift level, sub badge NAME

      message BadgeLabel {
        string label = 1;
        string name = 2; // Found to contain top gifter status "No. 2", "No.1", "No. 3", etc.
      }
    }

  }

}




// Ranking Type
message Ranking {

  string type = 1;
  string label = 2;
  TikTokColour extra = 3;
  repeated ValueLabel details = 4;

  message TikTokColour {
    string colour = 1;
    uint64 id = 4;
  }

}


message ValueLabel {

  string label = 2;
  string label2 = 3;
  uint32 data = 1;
  string value = 11; // Rank number

}



